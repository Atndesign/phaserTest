{"version":3,"sources":["src/CST.js","src/scenes/LoadScene.js","src/scenes/MenuScene.js","helpers/inputManager.js","src/scenes/PlayScene.js","src/main.js"],"names":["CST","SCENE","LOAD","MENU","PLAY","Scene","LoadScene","key","Phaser","load","image","loadingBar","add","graphics","fillStyle","color","on","percent","fillRect","game","renderer","height","width","scene","start","launch","MenuScene","setOrigin","playBtn","setInteractive","InputManager","DIRECTION_VELOCITY","InputManagerBind","keyboard","keys","name","value","Z","velocityX","velocityY","S","D","Q","Input","player","Object","forEach","isDown","currentKey","find","updatePlayerPos","Sprite","PlayScene","lol","console","log","tilemapTiledJSON","textures","spritesheet","frameWidth","frameHeight","input","addKeys","reaper","Player","boomSlime","Slime","physicsGroup","physics","group","angularDrag","collideWorldBounds","dragX","dragY","map","tilemap","terrain","addTilesetImage","layer","createStaticLayer","setDepth","collider","setCollisionByProperty","collides","handleUpdate","x","y","texture","velocity","existing","events","update","Physics","Arcade","anims","create","frameRate","repeat","frames","generateFrameNumbers","end","sprite","setVelocity","target","speed","slime","Game","render","pixelArt","default","arcade","debug"],"mappings":"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","file":"main.e301777d.js","sourceRoot":"..","sourcesContent":["export const CST = {\r\n    SCENE: {\r\n        LOAD: \"LOAD\",\r\n        MENU: \"MENU\",\r\n        PLAY: \"PLAY\",\r\n    }\r\n}","import { CST } from \"../CST\";\r\n\r\nexport class LoadScene extends Phaser.Scene{\r\n    constructor(){\r\n        super({\r\n            key: CST.SCENE.LOAD\r\n        })\r\n    }\r\n    preload()\r\n    {\r\n        this.load.image(\"background\",\"./assets/img/menu/background.png\");\r\n        this.load.image(\"play\",\"./assets/img/menu/play.png\");\r\n        this.load.image(\"settings\",\"./assets/img/menu/settings.png\");\r\n        this.load.image(\"title\",\"./assets/img/menu/title.png\");\r\n\r\n        let loadingBar = this.add.graphics({\r\n            fillStyle: {\r\n                color: 0xffffff\r\n            }\r\n        })\r\n\r\n        this.load.on('progress', (percent)=>{\r\n            loadingBar.fillRect(0,this.game.renderer.height / 2, this.game.renderer.width * percent, 50);\r\n        })\r\n    }\r\n    create()\r\n    {\r\n        this.scene.start(CST.SCENE.MENU)\r\n        this.scene.launch();\r\n    }\r\n}","import { CST } from \"../CST\";\r\n\r\nexport class MenuScene extends Phaser.Scene{\r\n    constructor(){\r\n        super({\r\n            key: CST.SCENE.MENU\r\n        })\r\n    }\r\n   \r\n    create()\r\n    {\r\n        this.add.image(0,0, \"background\").setOrigin(0)\r\n        this.add.image(this.game.renderer.width / 2,50, \"title\")\r\n        this.add.image(this.game.renderer.width / 1.5, this.game.renderer.height * .80, \"settings\")\r\n        let playBtn = this.add.image(this.game.renderer.width/ 3, this.game.renderer.height * .80, \"play\")\r\n\r\n        playBtn.setInteractive();\r\n        playBtn.on('pointerover',()=>{\r\n            this.scene.start(CST.SCENE.PLAY)\r\n        })\r\n    }\r\n}","\r\nconst DIRECTION_VELOCITY = 10;\r\n\r\nexport class InputManagerBind extends Phaser.Input.InputManager {\r\n    constructor(game,keyboard){\r\n        super(game,keyboard)\r\n        this.keyboard = keyboard\r\n        this.keys = [{\r\n            name: \"Z\", \r\n            value: keyboard.Z,\r\n            velocityX: 0,\r\n            velocityY: -DIRECTION_VELOCITY,\r\n        },\r\n        {\r\n            name: \"S\", \r\n            value: keyboard.S,\r\n            velocityX: 0,\r\n            velocityY: DIRECTION_VELOCITY,\r\n        },\r\n        {\r\n            name: \"D\", \r\n            value: keyboard.D,\r\n            velocityX: DIRECTION_VELOCITY,\r\n            velocityY: 0,\r\n        },\r\n        {\r\n            name: \"Q\", \r\n            value: keyboard.Q,\r\n            velocityX: -DIRECTION_VELOCITY,\r\n            velocityY: 0,\r\n        }]\r\n    }\r\n    handleUpdate(player){\r\n        Object.keys(this.keyboard).forEach(key => {\r\n            if(this.keyboard[key].isDown){\r\n                this.currentKey = this.keys.find(({ name }) => name === key);\r\n                player.updatePlayerPos(this.currentKey.velocityX, this.currentKey.velocityY);\r\n            }\r\n        })\r\n    }\r\n    getKeys(){\r\n        return this.keys\r\n    }\r\n}","import { CST } from \"../CST\";\r\nimport { InputManagerBind } from \"../../helpers/inputManager\";\r\n\r\nexport class PlayScene extends Phaser.Scene{\r\n    constructor(){\r\n        super({\r\n            key: CST.SCENE.PLAY,\r\n        })\r\n        this.lol = 40;\r\n        console.log(this.lol)\r\n    }\r\n    preload()\r\n    {\r\n        this.load.image(\"terrain\", \"./assets/tilesetMap.png\");\r\n        this.load.tilemapTiledJSON(\"map\", \"./assets/map.json\");\r\n\r\n        this.textures.spritesheet = this.load.spritesheet(\"reaper\", \"./assets/img/game/player.png\" ,{frameWidth: 16, frameHeight: 16})\r\n        this.textures.spritesheet = this.load.spritesheet(\"boomSlime\", \"./assets/img/game/enemies/slimes/boomSlime.png\" ,{frameWidth: 16, frameHeight: 16})\r\n        this.keyboard = this.input.keyboard.addKeys(\"Z,Q,S,D\");\r\n        this.InputManagerBind = new InputManagerBind(this,this.keyboard)\r\n    }\r\n    create()\r\n    {\r\n        this.reaper = new Player(this, 250, 300, \"reaper\")\r\n        this.boomSlime = new Slime(this, 10, 50, \"boomSlime\", this.reaper, 40)\r\n        this.physicsGroup = this.physics.add.group({\r\n            // Initial angular speed of 60 degrees per second.\r\n            // Drag reduces it by 5 degrees/s per second, thus to zero after 12 seconds.\r\n            angularDrag: 5,\r\n            collideWorldBounds: true,\r\n            dragX: 150,\r\n            dragY: 60,\r\n        });\r\n        this.physicsGroup.add(this.reaper)\r\n        // Map from tiled\r\n        this.map = this.add.tilemap(\"map\");\r\n        this.terrain = this.map.addTilesetImage(\"tilesetMap\", \"terrain\")\r\n        this.layer = this.map.createStaticLayer(\"terrainMaybe\", [this.terrain], 0,0).setDepth(-1)\r\n        this.physics.add.collider(this.reaper, this.layer)\r\n        this.layer.setCollisionByProperty({collides:true})\r\n    }\r\n    update()\r\n    {\r\n        this.InputManagerBind.handleUpdate(this.reaper)\r\n    }\r\n}\r\n\r\nclass Player extends Phaser.Physics.Arcade.Sprite {\r\n    constructor(scene, x = 0, y = 0, texture = 'dude') {\r\n      super(scene, x, y, texture)\r\n      this.velocity = {\r\n        x: 0,\r\n        y: 0,\r\n      };\r\n      scene.add.existing(this)\r\n      scene.physics.add.existing(this)\r\n      scene.events.on('update', this.update, this)\r\n    }\r\n    create()\r\n    {\r\n        this.anims.create({\r\n            key: \"walk\",\r\n            frameRate: 5,\r\n            repeat: -1,\r\n            frames: this.anims.generateFrameNumbers(texture, { start: 0, end: 0 }),\r\n        });\r\n        this.reaper = this.add.sprite(100,100,texture)\r\n    }\r\n    update()\r\n    {\r\n        \r\n    }\r\n    updatePlayerPos(velocityX, velocityY){\r\n        this.velocity.x = this.velocity.x + velocityX;\r\n        this.velocity.y = this.velocity.y + velocityY;\r\n        this.setVelocity(this.velocity.x, this.velocity.y);\r\n    }\r\n}\r\n\r\nclass Slime extends Phaser.Physics.Arcade.Sprite {\r\n    constructor(scene, x = 0, y = 0, texture = 'boomSlime', target, speed) {\r\n      super(scene, x, y, texture, target, speed)\r\n        this.target = target\r\n        this.speed = speed;\r\n        scene.add.existing(this)\r\n        scene.physics.add.existing(this)\r\n        scene.events.on('update', this.update, this)\r\n        }\r\n    \r\n    create()\r\n    {\r\n        this.anims.create({\r\n            key: \"walk\",\r\n            frameRate: 5,\r\n            repeat: -1,\r\n            frames: this.anims.generateFrameNumbers(texture, { start: 0, end: 0 }),\r\n        });\r\n        this.slime = this.add.sprite(100,100,texture)\r\n    }\r\n    update()\r\n    {\r\n       \r\n    }\r\n}","import {LoadScene} from \"./scenes/LoadScene\"\r\nimport {MenuScene} from \"./scenes/MenuScene\"\r\nimport {PlayScene} from \"./scenes/PlayScene\"\r\n\r\nexport let game = new Phaser.Game({\r\n    width: 400,\r\n    height: 600,\r\n    scene: [\r\n        LoadScene, MenuScene, PlayScene\r\n    ],\r\n    render: {\r\n        pixelArt: true\r\n    },\r\n    physics: {\r\n        default: \"arcade\",\r\n        arcade: {\r\n            debug: false\r\n        },\r\n    }\r\n})"]}