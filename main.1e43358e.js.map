{"version":3,"sources":["src/CST.js","src/scenes/LoadScene.js","src/scenes/MenuScene.js","helpers/inputManager.js","src/scenes/PlayScene.js","src/main.js"],"names":["CST","SCENE","LOAD","MENU","PLAY","LoadScene","key","load","image","loadingBar","add","graphics","fillStyle","color","on","percent","fillRect","game","renderer","height","width","scene","start","launch","Phaser","Scene","MenuScene","setOrigin","playBtn","setInteractive","TILE_SIZE","DIRECTION_VELOCITY","InputManagerBind","keyboard","keys","name","value","W","velocityX","velocityY","S","D","A","player","Object","forEach","isDown","currentKey","find","play","updatePlayerPos","Input","InputManager","PlayScene","tilemapTiledJSON","textures","spritesheet","frameWidth","frameHeight","input","addKeys","reaper","Player","physicsGroup","physics","group","angularDrag","collideWorldBounds","dragX","dragY","map","tilemap","terrain","addTilesetImage","layer","createStaticLayer","setDepth","collider","setCollisionByProperty","collides","handleUpdate","x","y","texture","currentScene","velocity","existing","events","create","update","anims","frameRate","frames","generateFrameNumbers","end","setScale","setVelocity","Physics","Arcade","Sprite","Slime","target","speed","repeat","slime","sprite","Game","render","pixelArt","default","arcade","debug"],"mappings":";;;;;;AAAO,IAAMA,GAAG,GAAG;AGAnB,AHCIC,AKDJ,AJAA,ACAA,AEAA,EJCIA,KAAK,EAAE;AACHC,IAAAA,IAAI,EAAE,MADH;AAEHC,AKFR,ADAA,IJEQA,IAAI,EAAE,MAFH;AAGHC,IAAAA,IAAI,EAAE;AAHH,AKCX;ALFmB,CAAZ;AKKA,IAAIa,IAAI,GAAG,IAAIO,MAAM,CAACkF,IAAX,CAAgB;AAC9BtF,EAAAA,KAAK,EAAE,GADuB;AAE9BD,EAAAA,MAAM,EAAE,GAFsB;AAG9BE,EAAAA,KAAK,EAAE,CACHhB,oBADG,EACQqB,oBADR,EACmB2B,oBADnB,CAHuB;AAM9BsD,EAAAA,MAAM,EAAE;AACJC,IAAAA,QAAQ,EAAE;AADN,GANsB;AAS9B5C,EAAAA,OAAO,EAAE;AACL6C,IAAAA,OAAO,EAAE,QADJ;AAELC,IAAAA,MAAM,EAAE;AACJC,MAAAA,KAAK,EAAE;AADH;AAFH;AATqB,CAAhB,CAAX;AFHP,IAAMjF,AFAOzB,ACAAqB,SCAE,GAAG,EAAlB;AACA,IAAMK,kBAAkB,GAAG,IAAID,SAA/B;ICAauB;IDEArB;;AFFT,ACAA,uBDAa,ACAA;ADAA,ACAA;AECb,uBAAa;ADEb,AFHa,ACAA,AECA,4BDEDf,IAAZ,EAAiBgB,QAAjB,EAA0B,sCFFhB,ACAA;ACEgB,AFDlB3B,ACAAA,MDAAA,ACAAA,GDAG,ACAA,EDAEN,ACAAA,SDAIC,ACAAA,KDAJ,ACAA,CDAUC,ACAAC;ADDb,ACAA,AEAG,KHDA,ACAA,6EEEH;ADCgB,AFCzB,ACAA,AEDOG,MAAAA,GAAG,EAAEN,SAAIC,KAAJ,CAAUG;AADb,KADG;ADGT,ACCH,0FDDSa,IAAN,EAAWgB,QAAX;AACA,UAAKA,QAAL,GAAgBA,QAAhB;AACA,UAAKC,IAAL,GAAY,CAAC,WDCjB,CDDA;AECQC,AFDR,ACCA,MCAQA,IAAI,EAAE,GADG;AAETC,MAAAA,KAAK,EAAEH,QAAQ,CAACI,CAFP,OCCjB;ADEQC,AFFJ,ACCA,AEAA,MDCIA,KFFC/B,ACCAG,AEAAH,GFAL,CCCa,AFFb,ACCSC,AEAT,CHDUA,AGCAA,CDCK,CAHF,EDEb,CDDA,ACCe,AEAf,CHDgB,ACChB,AEAgB,EFAC,CAAjB,EAAoB,IEApB,EAA2B,CHD3B,EAA6B,GCC7B,EAAkCmB,SAAlC,CAA4C,CAA5C,MEAA,YHDA;AEGIY,AFFJ,ACCA,AEAA,MDCIA,KFFChC,ACCAG,AEAAH,GFAL,CCCa,AFFb,ACCSC,AEAT,CHDUA,AGCA8C,CDCK,CAACvB,EDDhB,CDDA,ACCe,CDDC,ICCId,EDDpB,EAAuB,ACCR,CAAUC,CEAzB,CAA2B,KAA3B,CFAe,CAAmBE,AEAA,KFAnB,GAA2B,CAA1C,EAA4C,EAA5C,EAAgD,GDDhD,CGCA,GFAA;ACHa,AFGb,ACCA,AECA,KDLY,EAMZ,IFHKb,ACCAG,AECA6C,GFDL,CDDA,ACCS/C,CDDCA,GGEV,CFDA,AECcgD,CHFd,ACCe,CDDC,ICCIvC,IAAL,CAAUC,AECzB,CHFA,EAA2B,AGEC,KFDb,AECkBX,CFDCa,GECN,CAAUoC,CFDvB,GAA2B,GAA1C,EAA+C,EECnB,CAAsB,EFDEvC,IAAL,CAAUC,CEC7B,EHF5B,AGE4D,KFDb,CAAmBC,MAAnB,GAA4B,GAA3E,EAAgF,UAAhF,AEC4B,EAAgE;ADExFgB,AFHJ,ACCA,AEA6FsB,MDEzFtB,ECFyFsB,EDErF,ADFJ7B,CDDCrB,CEGK,GADV,AFFA,CAAUC,CCCC,CEA4F,EFAzF,AEA2F,CHDzG,CAAgB,AGC4E,GFAzEE,GAAL,CDDd,ACCuBF,EDDC,GCCV,CAAe,KAAKS,IAAL,CAAUC,QAAV,CAAmBE,KAAnB,CDD7B,ECCuD,CAAzC,EAA4C,KAAKH,IAAL,CAAUC,QAAV,CAAmBC,MAAnB,GAA4B,GAAxE,EAA6E,MAA7E,CAAd;ACGIiB,AFFJ,ACCAR,AEF6G8B,MDGzGtB,ADDJR,EEF6G8B,EHCzGjD,CEEK,EAAEwB,ADDJ,CAACJ,KEFgH,CHC1G,CEEK,ACHuG,CDGtGW,CAFpB,AFAiB,KAAK9B,ACCtB,GDDiB,CAASC,QAAT,CAAkB;AEG/B2B,AFFA1B,ACCJgB,AEH4F,MDIxFU,ADDJV,CEH4B,CHExBhB,AGFJ,KFGO,CAACE,CCCK,CDDb,CCCe,AFFF,ACCF,CCFX,CFCe,WCCf,EAAyB,YAAI;ACEzByB,AFFI1B,ACCJ,AEHJ,MDII0B,EDDA,EDDI1B,CGFH0C,EFGG,CAAClC,CCCI,AFFA,EEEEU,AFFA,ECCX,AEHJ,CFGeT,AEHDkC,KFGV,CAAiBxD,KEHrB,GAA4B,CFGHC,IEHQM,CFGZ,CAAUH,EEHH,CAAUoD,CFGlC,UEHwB,CAAsB,WAAtB,EAAmC,gDAAnC,EAAqF;ADAjH,AFCe,ACGd,AEJiHC,KDNtG,EAYZ,ADJA,CEFkHA,UAAU,EAAE,EAAb;ADO7GtB,AFP+B,ACKtC,AELqIuB,MDO9HvB,CFPa,CAAjB,AGAkIuB,EDO1H,EAAE,GADV,ICN6I,EAAE;ADQ3ItB,AFFJ,AGNiH,MDQ7GA,CCRwB,CAA5B,GDQS,AFFJ7B,EEEM0B,EFFX,CAAUnB,EAAV,CAAa,EEEM,CAAC2B,CAFpB,MFAA,EAAyB,UAAC1B,OAAD,EAAW;AEGhCuB,AFFA7B,AGNJ,MDQI6B,EFFA7B,GGNCwB,IDQQ,EAAEF,CFFD,CAACf,AGNf,GAAgB,KHMZ,AGNiB2C,CHMG,CAApB,EAAsB,CGNV,CAAW1B,EDK3B,CFC8B,CAAChB,IAAL,AGNV,CHMoBC,AGNA0C,OAApB,CHMU,AGNkB,CHMCzC,MAAnB,EGNV,CHMsC,AGNtD,CHMI,EAAqD,KAAI,CAACF,IAAL,CAAUC,QAAV,CAAmBE,KAAnB,GAA2BL,OAAhF,EAAyF,EAAzF;AEGAwB,AFFH,AGND,MDQIA,CFJJ,IGJKP,IDQQ,EAAE,UCRf,GAAwB,IAAIA,8BAAJ,CAAqB,IAArB,EAA0B,KAAKC,QAA/B,CAAxB;ADIA,AFGH,AGNA,EFhB0BT,GCOX,EAkBZ,CDzB6B,CAACC;AC0B1BU,MAAAA,IAAI,EAAE,GADV;AAEIC,MAAAA,KAAK,EAAEH,QAAQ,CAACS,CAFpB;AAGIJ,MAAAA,SAAS,EAAE,CAACP,WFJpB,AGNA,ODOI;AAIIQ,AFJJ,AGJA,MDQIA,KFJClB,AGJAwC,IDQQ,CFJb,CEIe,AFJJvC,AGJX,GAAc,EHId,CAAiBtB,CGJC8D,MAAJ,CAAW,CHIJ7D,GGJP,EHIG,AGJc,CHIJE,EGJb,EHId,AGJoC,GAAtB,EAA2B,QA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","file":"main.1e43358e.js","sourceRoot":"..","sourcesContent":["export const CST = {\r\n    SCENE: {\r\n        LOAD: \"LOAD\",\r\n        MENU: \"MENU\",\r\n        PLAY: \"PLAY\",\r\n    }\r\n}","import { CST } from \"../CST\";\r\n\r\nexport class LoadScene extends Phaser.Scene{\r\n    constructor(){\r\n        super({\r\n            key: CST.SCENE.LOAD\r\n        })\r\n    }\r\n    preload()\r\n    {\r\n        this.load.image(\"background\",\"./assets/img/menu/background.png\");\r\n        this.load.image(\"play\",\"./assets/img/menu/play.png\");\r\n        this.load.image(\"settings\",\"./assets/img/menu/settings.png\");\r\n        this.load.image(\"title\",\"./assets/img/menu/title.png\");\r\n\r\n        let loadingBar = this.add.graphics({\r\n            fillStyle: {\r\n                color: 0xffffff\r\n            }\r\n        })\r\n\r\n        this.load.on('progress', (percent)=>{\r\n            loadingBar.fillRect(0,this.game.renderer.height / 2, this.game.renderer.width * percent, 50);\r\n        })\r\n    }\r\n    create()\r\n    {\r\n        this.scene.start(CST.SCENE.MENU)\r\n        this.scene.launch();\r\n    }\r\n}","import { CST } from \"../CST\";\r\n\r\nexport class MenuScene extends Phaser.Scene{\r\n    constructor(){\r\n        super({\r\n            key: CST.SCENE.MENU\r\n        })\r\n    }\r\n   \r\n    create()\r\n    {\r\n        this.add.image(0,0, \"background\").setOrigin(0)\r\n        this.add.image(this.game.renderer.width / 2,50, \"title\")\r\n        this.add.image(this.game.renderer.width / 1.5, this.game.renderer.height * .80, \"settings\")\r\n        let playBtn = this.add.image(this.game.renderer.width/ 3, this.game.renderer.height * .80, \"play\")\r\n\r\n        playBtn.setInteractive();\r\n        playBtn.on('pointerover',()=>{\r\n            this.scene.start(CST.SCENE.PLAY)\r\n        })\r\n    }\r\n}","import { tileSize } from \"../src/main\"\r\n\r\nconst TILE_SIZE = 16\r\nconst DIRECTION_VELOCITY = 2 * TILE_SIZE;\r\n\r\nexport class InputManagerBind extends Phaser.Input.InputManager {\r\n    constructor(game,keyboard){\r\n        super(game,keyboard)\r\n        this.keyboard = keyboard\r\n        this.keys = [{\r\n            name: \"W\", \r\n            value: keyboard.W,\r\n            velocityX: 0,\r\n            velocityY: -DIRECTION_VELOCITY,\r\n        },\r\n        {\r\n            name: \"S\", \r\n            value: keyboard.S,\r\n            velocityX: 0,\r\n            velocityY: DIRECTION_VELOCITY,\r\n        },\r\n        {\r\n            name: \"D\", \r\n            value: keyboard.D,\r\n            velocityX: DIRECTION_VELOCITY,\r\n            velocityY: 0,\r\n        },\r\n        {\r\n            name: \"A\", \r\n            value: keyboard.A,\r\n            velocityX: -DIRECTION_VELOCITY,\r\n            velocityY: 0,\r\n        }]\r\n    }\r\n    handleUpdate(player){\r\n        Object.keys(this.keyboard).forEach(key => {\r\n            if(this.keyboard[key].isDown){\r\n                this.currentKey = this.keys.find(({ name }) => name === key);\r\n                switch (this.currentKey.name) {\r\n                    case \"W\":\r\n                        player.play(\"walkUp\", true)\r\n                        break;\r\n                    case \"A\":\r\n                        player.play(\"walkLeft\", true)\r\n                        break;\r\n                    case \"S\":\r\n                        player.play(\"walkDown\", true)\r\n                        break;\r\n                    case \"D\":\r\n                        player.play(\"walkRight\", true)\r\n                        break;                \r\n                    default:\r\n                        break;\r\n                }\r\n                player.updatePlayerPos(this.currentKey.velocityX, this.currentKey.velocityY);\r\n            }\r\n        })\r\n    }\r\n    getKeys(){\r\n        return this.keys\r\n    }\r\n}","import { CST } from \"../CST\";\r\nimport { InputManagerBind } from \"../../helpers/inputManager\";\r\n\r\nexport class PlayScene extends Phaser.Scene{\r\n    constructor(){\r\n        super({\r\n            key: CST.SCENE.PLAY,\r\n        })\r\n    }\r\n    preload()\r\n    {\r\n        this.load.image(\"terrain\", \"./assets/tilesetMap.png\");\r\n        this.load.tilemapTiledJSON(\"map\", \"./assets/map.json\");\r\n\r\n        this.textures.spritesheet = this.load.spritesheet(\"reaper\", \"./assets/img/game/player.png\" ,{frameWidth: 16, frameHeight: 16})\r\n        this.textures.spritesheet = this.load.spritesheet(\"boomSlime\", \"./assets/img/game/enemies/slimes/boomSlime.png\" ,{frameWidth: 16, frameHeight: 16})\r\n        this.keyboard = this.input.keyboard.addKeys(\"W,A,S,D\");\r\n        this.InputManagerBind = new InputManagerBind(this,this.keyboard)\r\n    }\r\n    create()\r\n    {\r\n        \r\n\r\n        this.reaper = new Player(this, 250, 300, \"reaper\",this)\r\n        // this.boomSlime = new Slime(this, 10, 50, \"boomSlime\", this.reaper, 40)\r\n        this.physicsGroup = this.physics.add.group({\r\n            // Initial angular speed of 60 degrees per second.\r\n            // Drag reduces it by 5 degrees/s per second, thus to zero after 12 seconds.\r\n            angularDrag: 5,\r\n            collideWorldBounds: true,\r\n            dragX: 150,\r\n            dragY: 60,\r\n        });\r\n        this.physicsGroup.add(this.reaper)\r\n        // Map from tiled\r\n        this.map = this.add.tilemap(\"map\");\r\n        this.terrain = this.map.addTilesetImage(\"tilesetMap\", \"terrain\")\r\n        this.layer = this.map.createStaticLayer(\"terrainMaybe\", [this.terrain], 0,0).setDepth(-1)\r\n        this.physics.add.collider(this.reaper, this.layer)\r\n        this.layer.setCollisionByProperty({collides:true})\r\n    }\r\n    update()\r\n    {\r\n        this.InputManagerBind.handleUpdate(this.reaper)\r\n    }\r\n}\r\n\r\nclass Player extends Phaser.Physics.Arcade.Sprite {\r\n    constructor(scene, x = 0, y = 0, texture = 'dude', currentScene) {\r\n      super(scene, x, y, texture)\r\n      this.velocity = {\r\n        x: 0,\r\n        y: 0,\r\n      };\r\n      this.texture = texture\r\n      this.currentScene = currentScene\r\n      scene.add.existing(this)\r\n      scene.physics.add.existing(this)\r\n      scene.events.on('create', this.create, this)\r\n      scene.events.on('update', this.update, this)\r\n    }\r\n    create()\r\n    {\r\n        // Set Player's animations\r\n\r\n        this.currentScene.anims.create({\r\n            key: \"walkDown\",\r\n            frameRate: 5,\r\n            // repeat: -1,\r\n            frames: this.currentScene.anims.generateFrameNumbers(\"reaper\", { start: 0, end: 0 }),\r\n        });   \r\n          this.currentScene.anims.create({\r\n            key: \"walkUp\",\r\n            frameRate: 5,\r\n            // repeat: -1,\r\n            frames: this.currentScene.anims.generateFrameNumbers(\"reaper\", { start: 1, end: 1 }),\r\n        });   \r\n        this.currentScene.anims.create({\r\n            key: \"walkLeft\",\r\n            frameRate: 5,\r\n            // repeat: -1,\r\n            frames: this.currentScene.anims.generateFrameNumbers(\"reaper\", { start: 2, end: 2 }),\r\n        });   \r\n          this.currentScene.anims.create({\r\n            key: \"walkRight\",\r\n            frameRate: 5,\r\n            // repeat: -1,\r\n            frames: this.currentScene.anims.generateFrameNumbers(\"reaper\", { start: 3, end: 3 }),\r\n        });   \r\n        this.setScale(2)\r\n    }\r\n    update()\r\n    {\r\n        \r\n    }\r\n    updatePlayerPos(velocityX, velocityY){\r\n        this.velocity.x = velocityX;\r\n        this.velocity.y = velocityY;\r\n        this.setVelocity(this.velocity.x, this.velocity.y);\r\n    }\r\n}\r\n\r\nclass Slime extends Phaser.Physics.Arcade.Sprite {\r\n    constructor(scene, x = 0, y = 0, texture = 'boomSlime', target, speed) {\r\n      super(scene, x, y, texture, target, speed)\r\n        this.target = target\r\n        this.speed = speed;\r\n        scene.add.existing(this)\r\n        scene.physics.add.existing(this)\r\n        scene.events.on('update', this.update, this)\r\n        }\r\n    \r\n    create()\r\n    {\r\n        this.anims.create({\r\n            key: \"walk\",\r\n            frameRate: 5,\r\n            repeat: -1,\r\n            frames: this.anims.generateFrameNumbers(texture, { start: 0, end: 0 }),\r\n        });\r\n        this.slime = this.add.sprite(100,100,texture)\r\n    }\r\n    update()\r\n    {\r\n       \r\n    }\r\n}","import {LoadScene} from \"./scenes/LoadScene\"\r\nimport {MenuScene} from \"./scenes/MenuScene\"\r\nimport {PlayScene} from \"./scenes/PlayScene\"\r\n\r\n\r\nexport let game = new Phaser.Game({\r\n    width: 400,\r\n    height: 600,\r\n    scene: [\r\n        LoadScene, MenuScene, PlayScene\r\n    ],\r\n    render: {\r\n        pixelArt: true\r\n    },\r\n    physics: {\r\n        default: \"arcade\",\r\n        arcade: {\r\n            debug: false\r\n        },\r\n    }\r\n})"]}