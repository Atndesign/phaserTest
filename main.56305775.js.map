{"version":3,"sources":["src/CST.js","src/scenes/LoadScene.js","src/scenes/MenuScene.js","helpers/inputManager.js","src/scenes/PlayScene.js","src/main.js"],"names":["CST","SCENE","LOAD","MENU","PLAY","Scene","LoadScene","key","Phaser","load","image","loadingBar","add","graphics","fillStyle","color","on","percent","fillRect","game","renderer","height","width","scene","start","launch","MenuScene","setOrigin","playBtn","setInteractive","InputManager","TILE_SIZE","DIRECTION_VELOCITY","InputManagerBind","keyboard","keys","name","value","W","velocityX","velocityY","S","D","A","Input","player","mobileControls","control","currentKey","play","updatePlayerPos","Object","forEach","isDown","find","Sprite","PlayScene","tilemapTiledJSON","textures","spritesheet","frameWidth","frameHeight","input","addKeys","reaper","Player","physicsGroup","physics","group","angularDrag","collideWorldBounds","dragX","dragY","map","tilemap","terrain","addTilesetImage","layer","createStaticLayer","setDepth","collider","setCollisionByProperty","collides","controlName","handleUpdate","x","y","texture","currentScene","velocity","existing","events","create","update","Physics","Arcade","anims","frameRate","frames","generateFrameNumbers","end","setScale","setVelocity","Slime","target","speed","repeat","slime","sprite","Game","render","pixelArt","default","arcade","debug"],"mappings":"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","file":"main.56305775.js","sourceRoot":"..","sourcesContent":["export const CST = {\r\n    SCENE: {\r\n        LOAD: \"LOAD\",\r\n        MENU: \"MENU\",\r\n        PLAY: \"PLAY\",\r\n    }\r\n}","import { CST } from \"../CST\";\r\n\r\nexport class LoadScene extends Phaser.Scene{\r\n    constructor(){\r\n        super({\r\n            key: CST.SCENE.LOAD\r\n        })\r\n    }\r\n    preload()\r\n    {\r\n        this.load.image(\"background\",\"./assets/img/menu/background.png\");\r\n        this.load.image(\"play\",\"./assets/img/menu/play.png\");\r\n        this.load.image(\"settings\",\"./assets/img/menu/settings.png\");\r\n        this.load.image(\"title\",\"./assets/img/menu/title.png\");\r\n\r\n        let loadingBar = this.add.graphics({\r\n            fillStyle: {\r\n                color: 0xffffff\r\n            }\r\n        })\r\n\r\n        this.load.on('progress', (percent)=>{\r\n            loadingBar.fillRect(0,this.game.renderer.height / 2, this.game.renderer.width * percent, 50);\r\n        })\r\n    }\r\n    create()\r\n    {\r\n        this.scene.start(CST.SCENE.MENU)\r\n        this.scene.launch();\r\n    }\r\n}","import { CST } from \"../CST\";\r\n\r\nexport class MenuScene extends Phaser.Scene{\r\n    constructor(){\r\n        super({\r\n            key: CST.SCENE.MENU\r\n        })\r\n    }\r\n   \r\n    create()\r\n    {\r\n        this.add.image(0,0, \"background\").setOrigin(0)\r\n        this.add.image(this.game.renderer.width / 2,50, \"title\")\r\n        this.add.image(this.game.renderer.width / 1.5, this.game.renderer.height * .80, \"settings\")\r\n        let playBtn = this.add.image(this.game.renderer.width/ 3, this.game.renderer.height * .80, \"play\")\r\n\r\n        playBtn.setInteractive();\r\n        playBtn.on('pointerover',()=>{\r\n            this.scene.start(CST.SCENE.PLAY)\r\n        })\r\n    }\r\n}","import { tileSize } from \"../src/main\"\r\n\r\nconst TILE_SIZE = 16\r\nconst DIRECTION_VELOCITY = 2 * TILE_SIZE;\r\n\r\nexport class InputManagerBind extends Phaser.Input.InputManager {\r\n    constructor(game,keyboard){\r\n        super(game,keyboard)\r\n        this.keyboard = keyboard\r\n        this.keys = [{\r\n            name: \"W\", \r\n            value: keyboard.W,\r\n            velocityX: 0,\r\n            velocityY: -DIRECTION_VELOCITY,\r\n        },\r\n        {\r\n            name: \"S\", \r\n            value: keyboard.S,\r\n            velocityX: 0,\r\n            velocityY: DIRECTION_VELOCITY,\r\n        },\r\n        {\r\n            name: \"D\", \r\n            value: keyboard.D,\r\n            velocityX: DIRECTION_VELOCITY,\r\n            velocityY: 0,\r\n        },\r\n        {\r\n            name: \"A\", \r\n            value: keyboard.A,\r\n            velocityX: -DIRECTION_VELOCITY,\r\n            velocityY: 0,\r\n        }]\r\n    }\r\n    handleUpdate(player, mobileControls, control = null){\r\n        if(mobileControls){\r\n           switch (control) {\r\n               case \"top\":\r\n                    this.currentKey = this.keys[0]\r\n                    player.play(\"walkUp\", true)\r\n                   \r\n                    break;\r\n                case \"down\":\r\n                    this.currentKey = this.keys[1]\r\n                    player.play(\"walkDown\", true)\r\n                   \r\n                    break;\r\n                case \"left\":\r\n                    this.currentKey = this.keys[3]\r\n                    player.play(\"walkLeft\", true)\r\n                   \r\n                    break;\r\n                case \"right\":\r\n                    this.currentKey = this.keys[2]\r\n                    player.play(\"walkRight\", true)\r\n                   \r\n                    break;\r\n           \r\n               default:\r\n                   break;\r\n           }\r\n           player.updatePlayerPos(this.currentKey.velocityX, this.currentKey.velocityY);\r\n\r\n        }\r\n        else{\r\n            Object.keys(this.keyboard).forEach(key => {\r\n                if(this.keyboard[key].isDown){\r\n                    this.currentKey = this.keys.find(({ name }) => name === key);\r\n                    switch (this.currentKey.name) {\r\n                        case \"W\":\r\n                            player.play(\"walkUp\", true)\r\n                            break;\r\n                        case \"A\":\r\n                            player.play(\"walkLeft\", true)\r\n                            break;\r\n                        case \"S\":\r\n                            player.play(\"walkDown\", true)\r\n                            break;\r\n                        case \"D\":\r\n                            player.play(\"walkRight\", true)\r\n                            break;                \r\n                        default:\r\n                            break;\r\n                    }\r\n                    player.updatePlayerPos(this.currentKey.velocityX, this.currentKey.velocityY);\r\n                }\r\n            })\r\n        }\r\n    }\r\n    getKeys(){\r\n        return this.keys\r\n    }\r\n}","import { CST } from \"../CST\";\r\nimport { InputManagerBind } from \"../../helpers/inputManager\";\r\n\r\nexport class PlayScene extends Phaser.Scene{\r\n    constructor(){\r\n        super({\r\n            key: CST.SCENE.PLAY,\r\n        })\r\n    }\r\n    preload()\r\n    {\r\n        this.load.image(\"leftBtn\",\"./assets/img/game/controls/leftCtrl.png\");\r\n        this.load.image(\"rightBtn\",\"./assets/img/game/controls/rightCtrl.png\");\r\n        this.load.image(\"topBtn\",\"./assets/img/game/controls/topCtrl.png\");\r\n        this.load.image(\"bottomBtn\",\"./assets/img/game/controls/bottomCtrl.png\");\r\n        this.load.image(\"terrain\", \"./assets/tilesetMap.png\");\r\n        this.load.tilemapTiledJSON(\"map\", \"./assets/map.json\");\r\n\r\n        this.textures.spritesheet = this.load.spritesheet(\"reaper\", \"./assets/img/game/player.png\" ,{frameWidth: 16, frameHeight: 16})\r\n        this.textures.spritesheet = this.load.spritesheet(\"boomSlime\", \"./assets/img/game/enemies/slimes/boomSlime.png\" ,{frameWidth: 16, frameHeight: 16})\r\n        this.keyboard = this.input.keyboard.addKeys(\"W,A,S,D\");\r\n        this.InputManagerBind = new InputManagerBind(this,this.keyboard)\r\n    }\r\n    create()\r\n    {\r\n        \r\n\r\n        this.reaper = new Player(this, 250, 300, \"reaper\",this)\r\n        // this.boomSlime = new Slime(this, 10, 50, \"boomSlime\", this.reaper, 40)\r\n        this.physicsGroup = this.physics.add.group({\r\n            // Initial angular speed of 60 degrees per second.\r\n            // Drag reduces it by 5 degrees/s per second, thus to zero after 12 seconds.\r\n            angularDrag: 5,\r\n            collideWorldBounds: true,\r\n            dragX: 150,\r\n            dragY: 60,\r\n        });\r\n        this.physicsGroup.add(this.reaper)\r\n        // Map from tiled\r\n        this.map = this.add.tilemap(\"map\");\r\n        this.terrain = this.map.addTilesetImage(\"tilesetMap\", \"terrain\")\r\n        this.layer = this.map.createStaticLayer(\"terrainMaybe\", [this.terrain], 0,0).setDepth(-1)\r\n        this.physics.add.collider(this.reaper, this.layer)\r\n        this.layer.setCollisionByProperty({collides:true})\r\n\r\n        // UserInputs\r\n        let controls = [\r\n            {\r\n                controlName: \"left\",\r\n                input: this.add.image(this.game.renderer.width * .10, this.game.renderer.height * .90, \"rightBtn\")\r\n            },\r\n            {\r\n                controlName: \"right\",\r\n                input: this.add.image(this.game.renderer.width * .30, this.game.renderer.height * .90, \"leftBtn\")\r\n            },\r\n            {\r\n                controlName: \"top\",\r\n                input: this.add.image(this.game.renderer.width * .20, this.game.renderer.height * .85, \"topBtn\")\r\n            },\r\n            {\r\n                controlName: \"bottom\",\r\n                input: this.add.image(this.game.renderer.width * .20, this.game.renderer.height *.95, \"bottomBtn\")\r\n            }\r\n        ]\r\n        controls.forEach(control => {\r\n            control.input.setInteractive();\r\n            control.input.on('pointerdown',()=>\r\n            {\r\n                this.InputManagerBind.handleUpdate(this.reaper,true,control.controlName)\r\n            })\r\n        })\r\n\r\n        \r\n    }\r\n    update()\r\n    {\r\n        this.InputManagerBind.handleUpdate(this.reaper)\r\n    }\r\n}\r\n\r\nclass Player extends Phaser.Physics.Arcade.Sprite {\r\n    constructor(scene, x = 0, y = 0, texture = 'dude', currentScene) {\r\n      super(scene, x, y, texture)\r\n      this.velocity = {\r\n        x: 0,\r\n        y: 0,\r\n      };\r\n      this.texture = texture\r\n      this.currentScene = currentScene\r\n      scene.add.existing(this)\r\n      scene.physics.add.existing(this)\r\n      scene.events.on('create', this.create, this)\r\n      scene.events.on('update', this.update, this)\r\n    }\r\n    create()\r\n    {\r\n        // Set Player's animations\r\n\r\n        this.currentScene.anims.create({\r\n            key: \"walkDown\",\r\n            frameRate: 5,\r\n            // repeat: -1,\r\n            frames: this.currentScene.anims.generateFrameNumbers(\"reaper\", { start: 0, end: 0 }),\r\n        });   \r\n          this.currentScene.anims.create({\r\n            key: \"walkUp\",\r\n            frameRate: 5,\r\n            // repeat: -1,\r\n            frames: this.currentScene.anims.generateFrameNumbers(\"reaper\", { start: 1, end: 1 }),\r\n        });   \r\n        this.currentScene.anims.create({\r\n            key: \"walkLeft\",\r\n            frameRate: 5,\r\n            // repeat: -1,\r\n            frames: this.currentScene.anims.generateFrameNumbers(\"reaper\", { start: 2, end: 2 }),\r\n        });   \r\n          this.currentScene.anims.create({\r\n            key: \"walkRight\",\r\n            frameRate: 5,\r\n            // repeat: -1,\r\n            frames: this.currentScene.anims.generateFrameNumbers(\"reaper\", { start: 3, end: 3 }),\r\n        });   \r\n        this.setScale(2)\r\n    }\r\n    update()\r\n    {\r\n        \r\n    }\r\n    updatePlayerPos(velocityX, velocityY){\r\n        this.velocity.x = velocityX;\r\n        this.velocity.y = velocityY;\r\n        this.setVelocity(this.velocity.x, this.velocity.y);\r\n    }\r\n}\r\n\r\nclass Slime extends Phaser.Physics.Arcade.Sprite {\r\n    constructor(scene, x = 0, y = 0, texture = 'boomSlime', target, speed) {\r\n      super(scene, x, y, texture, target, speed)\r\n        this.target = target\r\n        this.speed = speed;\r\n        scene.add.existing(this)\r\n        scene.physics.add.existing(this)\r\n        scene.events.on('update', this.update, this)\r\n        }\r\n    \r\n    create()\r\n    {\r\n        this.anims.create({\r\n            key: \"walk\",\r\n            frameRate: 5,\r\n            repeat: -1,\r\n            frames: this.anims.generateFrameNumbers(texture, { start: 0, end: 0 }),\r\n        });\r\n        this.slime = this.add.sprite(100,100,texture)\r\n    }\r\n    update()\r\n    {\r\n       \r\n    }\r\n}","import {LoadScene} from \"./scenes/LoadScene\"\r\nimport {MenuScene} from \"./scenes/MenuScene\"\r\nimport {PlayScene} from \"./scenes/PlayScene\"\r\n\r\n\r\nexport let game = new Phaser.Game({\r\n    width: 400,\r\n    height: 600,\r\n    scene: [\r\n        LoadScene, MenuScene, PlayScene\r\n    ],\r\n    render: {\r\n        pixelArt: true\r\n    },\r\n    physics: {\r\n        default: \"arcade\",\r\n        arcade: {\r\n            debug: false\r\n        },\r\n    }\r\n})"]}